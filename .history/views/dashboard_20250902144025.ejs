<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
  <link
    rel="stylesheet"
    href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
    crossorigin=""
  />

  <style>
    #map {
      height: 80vh;
      min-height: 400px;
      border-radius: 1rem;
    }  
    .legend { 
      background: white; 
      padding: 8px 10px; 
      border-radius: 8px; 
      line-height: 1.2; 
      box-shadow: 0 2px 8px rgba(0,0,0,.1); 
    }
    .legend i { 
      width: 12px; 
      height: 12px; 
      display: inline-block; 
      margin-right: 6px; 
    }

    .btn-custom {
      transition: all 0.3s ease;
    }
    .btn-custom:hover {
      transform: scale(1.05);
      box-shadow: 0px 4px 12px rgba(0,0,0,0.2);
    }
  </style>
</head>

<body class="bg-light">

  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
      <a class="navbar-brand fw-bold" href="/">ðŸš¦ Smart Traffic</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item"><a class="nav-link active fw-bold" href="/">Dashboard</a></li>
          <li class="nav-item"><a class="nav-link" href="/intersections">Intersections</a></li>
          <li class="nav-item"><a class="nav-link" href="/historical">Historical Data</a></li>
        </ul>
      </div>
    </div>
  </nav>


  <!-- Content -->
  <div class="container mt-4">

    <!-- Toolbar above map -->
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h5 class="fw-bold">City Intersections</h5>
      <div class="btn-group">
        <button class="btn btn-outline-primary btn-custom" onclick="refreshMap()">
          <i class="bi bi-arrow-clockwise"></i> Refresh
        </button>
        <button class="btn btn-outline-success btn-custom" onclick="toggleTraffic()">
          <i class="bi bi-map"></i> Toggle Traffic
        </button>
        <button class="btn btn-outline-warning btn-custom" onclick="switchMode()">
          <i class="bi bi-sliders"></i> Switch Mode
        </button>
      </div>
    </div>

    <div class="card shadow-sm">
      <div class="card-body">
        <div id="map"></div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script
    src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM/kM7lYhZf2z8a5wY="
    crossorigin=""
  ></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    // Server-provided data
    const intersections = <%- JSON.stringify(intersections) %>; 

    // Map setup
    const defaultCenter = intersections.length ? [intersections[0].lat, intersections[0].lng] : [28.6139, 77.2090];
    const map = L.map('map').setView(defaultCenter, 13);

    const baseLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    // Optional traffic layer (toggle)
    let trafficLayer;
    function toggleTraffic() {
      if (trafficLayer) {
        map.removeLayer(trafficLayer);
        trafficLayer = null;
      } else {
        trafficLayer = L.tileLayer('https://{s}.tile.opentrafficmap.org/{z}/{x}/{y}.png');
        trafficLayer.addTo(map);
      }
    }

    function colorForStatus(s) {
      return {
        normal:   '#2ecc71',
        busy:     '#f1c40f',
        congested:'#e67e22',
        critical: '#e74c3c',
        offline:  '#7f8c8d',
        unknown:  '#95a5a6'
      }[s] || '#95a5a6';
    }

    const group = L.featureGroup();
    intersections.forEach(x => {
      const marker = L.circleMarker([x.lat, x.lng], {
        radius: 9,
        color: colorForStatus(x.status),
        fillColor: colorForStatus(x.status),
        weight: 1.5,
        opacity: 1,
        fillOpacity: 0.85
      }).bindPopup(
        `<strong>${x.name ?? 'Intersection ' + x.id}</strong><br>
         Status: <b>${x.status}</b><br>
         Volume: ${x.volume ?? 'â€”'} veh/hr<br>
         Avg Delay: ${x.avgDelay ?? 'â€”'} s`
      );
      marker.addTo(group);
    });

    group.addTo(map);
    if (intersections.length > 1) map.fitBounds(group.getBounds().pad(0.2));

    // Legend
    const legend = L.control({position: 'bottomleft'});
    legend.onAdd = function() {
      const div = L.DomUtil.create('div', 'legend');
      const cats = ['normal','busy','congested','critical','offline','unknown'];
      div.innerHTML = '<b>Status</b><br>' + cats.map(c =>
        `<i style="background:${colorForStatus(c)}"></i>${c}`
      ).join('<br>');
      return div;
    };
    legend.addTo(map);

    // Toolbar button functions
    function refreshMap() {
      location.reload();
    }
    function switchMode() {
      alert("Switching mode (AUTO â†” MANUAL) â€“ implement logic here.");
    }
  </script>
</body>
</html>

<!-- views/dashboard.ejs -->
<link
  rel="stylesheet"
  href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
  integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
  crossorigin=""
/>

<style>
    #map {
  height: 80vh;
  min-height: 400px;
  border-radius: 1rem;
}  
  .legend { background: white; padding: 8px 10px; border-radius: 8px; line-height: 1.2; box-shadow: 0 2px 8px rgba(0,0,0,.1); }
  .legend i { width: 12px; height: 12px; display: inline-block; margin-right: 6px; }
</style>

<div class="card shadow-sm">
  <div class="card-body">
    <h5 class="card-title mb-3">City Intersections</h5>
    <div id="map"></div>
  </div>
</div>

<script
  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
  integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM/kM7lYhZf2z8a5wY="
  crossorigin=""
></script>
<script>
  // Server-provided data: [{ id, name, lat, lng, status, volume, avgDelay }]
  const intersections = <%- JSON.stringify(intersections) %>; 

  // If you already know a good center, set it; else fit to data
  const defaultCenter = intersections.length ? [intersections[0].lat, intersections[0].lng] : [28.6139, 77.2090];
  const map = L.map('map').setView(defaultCenter, 13);

  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution: '&copy; OpenStreetMap contributors'
  }).addTo(map);

  function colorForStatus(s) {
    // match your old 6 colors if you want
    return {
      normal:   '#2ecc71',
      busy:     '#f1c40f',
      congested:'#e67e22',
      critical: '#e74c3c',
      offline:  '#7f8c8d',
      unknown:  '#95a5a6'
    }[s] || '#95a5a6';
  }

  const group = L.featureGroup();

  intersections.forEach(x => {
    const marker = L.circleMarker([x.lat, x.lng], {
      radius: 9,
      color: colorForStatus(x.status),
      fillColor: colorForStatus(x.status),
      weight: 1.5,
      opacity: 1,
      fillOpacity: 0.85
    }).bindPopup(
      `<strong>${x.name ?? 'Intersection ' + x.id}</strong><br>
       Status: <b>${x.status}</b><br>
       Volume: ${x.volume ?? '—'} veh/hr<br>
       Avg Delay: ${x.avgDelay ?? '—'} s`
    );
    marker.addTo(group);
  });

  group.addTo(map);
  if (intersections.length > 1) map.fitBounds(group.getBounds().pad(0.2));

  // Legend
  const legend = L.control({position: 'bottomleft'});
  legend.onAdd = function() {
    const div = L.DomUtil.create('div', 'legend');
    const cats = ['normal','busy','congested','critical','offline','unknown'];
    div.innerHTML = '<b>Status</b><br>' + cats.map(c =>
      `<i style="background:${colorForStatus(c)}"></i>${c}`
    ).join('<br>');
    return div;
  };
  legend.addTo(map);

  
</script>
